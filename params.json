{"name":"rbm.py","body":"### Introduction\r\n_rbm.py_ is the fastest and easiest way to use Restricted Boltzmann Machines (RBMs). RBMs are a \r\nclass of probabilistic models that can discover hidden patterns in your data. _rbm.py_ provides all the necessary methods with a pythonic interface, and moreover, all methods call blazing fast C code. The code can also run transparently on GPU thanks to [Theano](http://deeplearning.net/software/theano/).\r\n\r\nHere's an example usage\r\n\r\n```\r\n$ python\r\n>>> import numpy, rbm\r\n>>> X = numpy.array([[0, 1, 0], \\\r\n                     [0, 1, 1], \\\r\n                     [1, 0, 1], \\\r\n                     [1, 1, 1]]) # Improvised dataset\r\n>>> model = rbm.RBM(n_hiddens=2) # RBM with two hiddens units\r\n>>> model.fit(X) # Train using dataset X\r\n>>> model.sample_h(X) # Get hidden code\r\narray([[0, 0],\r\n       [0, 1],\r\n       [1, 1],\r\n       [1, 0]])\r\n>>> model.gibbs(X) # MCMC step\r\narray([[0, 1, 1],\r\n       [1, 0, 1],\r\n       [0, 0, 1],\r\n       [1, 0, 1]])\r\n```\r\n\r\n### Authors and Contributors\r\nYann N. Dauphin (@ynd)\r\n\r\n### Support or Contact\r\nHaving trouble? Check out https://github.com/ynd/rbm.py/issues.","tagline":"Pain-free Restricted Boltzmann Machines","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}